[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
  let g:gruvbox_italic=1
  let g:gruvbox_contrast_light='medium'
'''

[[plugins]]
repo = 'fuenor/im_control.vim'
hook_add = '''
  let g:IM_CtrlMode=6
  let g:IMState=0
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['gruvbox']
hook_add = '''
'''

[[plugins]]
repo = 'osyo-manga/vim-brightest'
hook_add = '''
  let g:brightest#highlight={
        \   "group" : "BrightestUnderline",
        \ }
  let g:brightest#pattern='\w\{2,}'
  let g:brightest#enable_on_CursorHold=0
'''

[[plugins]]
repo = 'spolu/dwm.vim'
hook_add = '''
  tnoremap <C-j> <C-\><C-n><C-j>
  tnoremap <C-k> <C-\><C-n><C-k>
  tnoremap <C-@> <C-\><C-n><C-@>
  nnoremap <C-p> :call DWM_Focus()<CR>
  " set master pane width
  let g:dwm_master_pane_width=90
'''

[[plugins]]
repo = 'tpope/vim-surround'
hook_add = '''
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  call neomake#configure#automake({
  \ 'TextChanged': {},
  \ 'InsertLeave': {},
  \ 'BufWritePost': {'delay': 0},
  \ 'BufWinEnter': {},
  \ }, 100)

  let g:neomake_verilog_enabled_makers=['verilator']
  let g:neomake_verilog_verilator_maker={
        \ 'exe': 'verilator',
        \ 'args': ['--lint-only', '-Wall', '+1364-2005ext+v'],
        \ 'errorformat':
        \   '%%%trror: %f:%l: %m,' .
        \   '%-G%%%trror: %s,' .
        \   '%%%tarning%s: %f:%l: %m,' .
        \   '%-G%%%tarning%s'
        \ }

  let g:neomake_error_sign={'text': 'E', 'texthl': 'NeomakeErrorSign'}
  let g:neomake_warning_sign={'text': 'W', 'texthl': 'NeomakeWarningSign'}
  let g:neomake_message_sign={'text': 'm', 'texthl': 'NeomakeMessageSign'}
  let g:neomake_info_sign={'text': 'i', 'texthl': 'NeomakeInfoSign'}

  " mappings for location list
  nnoremap Q  :lopen<CR>
  autocmd FileType qf call s:ll_mappings()
  function! s:ll_mappings() abort
    let wi = getwininfo(win_getid())[0]
    if !wi.loclist
      return
    endif
    nnoremap <silent><buffer> Q     :lclose<CR>
    nnoremap <silent><buffer> <CR>  <CR>:lclose<CR>
    nnoremap <silent><buffer> j     :lnext<CR>:lopen<CR>
    nnoremap <silent><buffer> k     :lprevious<CR>:lopen<CR>
  endfunction
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  " Enable omni completion.
  "augroup deopletecmds
  "  autocmd!
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  "augroup END

  let g:deoplete#enable_at_startup=1
  let g:deoplete#enable_ignore_case=1
  let g:deoplete#file#enable_buffer_path=1
  let g:deoplete#enable_smart_case=1

  let g:deoplete#omni_patterns={}
  let g:deoplete#omni_patterns.c='[^.[:digit:] *\t]\%(\.\|->\)'
  let g:deoplete#omni_patterns.cpp='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
  let g:deoplete#omni_patterns.cs='[^. *\t]\.\w*'
  let g:deoplete#omni_patterns.java='[^. *\t]\.\w*'
  let g:deoplete#file#enable_buffer_path=1
  let g:deoplete#auto_completion_start_length=3
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'gnperdue/vim-asciidoc'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
  let g:vim_markdown_no_default_key_mappings=1
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_do_mapping = 0 " Disable default mappings
  nmap f <Plug>(easymotion-overwin-f2)
  let g:EasyMotion_smartcase = 1
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap E
\ :call DWM_New()
\ :<C-u>Defx -listed -split=vertical -winwidth=50 -direction=topleft -toggle -resume<CR>

autocmd FileType defx call s:defx_mappings()
function! s:defx_mappings() abort
  " Define mappings
  nnoremap <silent><buffer> E
  \ :exec DWM_Close()<CR>
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('multi', [['drop', 'vsplit'], 'quit'])
  "\ defx#do_action('multi', ['drop', 'quit'])
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open_tree')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('close_tree')
  nnoremap <silent><buffer><expr> L
  \ defx#do_action('open_directory')
  nnoremap <silent><buffer><expr> H
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> a
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> A
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')

  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> R
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
'''
hook_source = '''
call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓',
        \ })
call defx#custom#column('icon', {
        \ 'directory_icon': '▸',
        \ 'opened_icon': '▾',
        \ 'root_icon': ' ',
        \ })
'''
